When we're working with
computer software, one of the things that's really useful is that programs
typically have some menu with a series of
actions that we can apply. If you've ever used word
processing software, there'll be a file menu
that allows you to run an action to open a new
file or save a file. You may have a menu
that allows you to search and replace
different pieces of text. This idea of having a
menu in different actions that we can run is a
really useful concept. Sometimes when we're working with prompts and
prompt engineering, and particularly when we
have a long conversation, it can be helpful to develop the equivalent within a prompt. Basically define essentially
a set of actions that we can run and order to work in the conversation
without having to repeat these long prompts, or we want to just codify certain actions
that are helpful to people and bake them into a prompt at the very beginning
of the conversation. Let me give you an
example of this. We're going to look at using
the menu actions pattern. This is a pattern
that allows us to get the same type of
behavior but in prompts. We're going to develop
a menu that is a series of actions
that we can run. Actions are basically
essentially a prompt. It's basically a set of instructions that
we're going to give the large language
model into order to do something at a particular
point in the conversation. Here's how this works. We describe what we're going to type in order to
trigger the action. I say whenever I type, write bullet point paragraphs, and let me talk about this
in more detail in a minute. Don't worry if this seems just doesn't quite
make sense yet. Whenever I type
this phrase, write, and then I haven't less than, greater than bullet
point and then paragraphs, these
are placeholders. Basically I'm saying
I'm going to type in write and then a placeholder
for a bullet point, and then a placeholder for
a number of paragraphs. You will write content for the selected bullet
point, bullet point. Basically what I'm saying
is I'm going to give you a bullet point that you need to go and
write the content for. Then I'm going to tell you how many paragraphs
of text to write. Then you're going to
go and write the text. Basically I'm developing
an action winches before all I could do
is expand my outline. When I talked about the
outline expansion pattern, I talked about being able to
rapidly expand the outline. Now what I'm going
to say is that at some point I'm going
to be able to tell you no go in and turn that into text rather than just outlined. I'm creating a new action. I'm also going to go ahead
and keep my original action, which is just
expanding the outline. I say whenever I type and I have a placeholder
for bullet point, you will expand
that bullet point. What I'm saying is
if I just type in 3.5.2 which is a bullet point like a number in my outline, it will know that it means
expand that in the outline. If I instead say, write
which is a keyword, and then a bullet point and
a number of paragraphs, it knows that that means it's supposed to write
the text for it. Undefined in a menu, I
now have two actions. I can either expand
my outline or I can write the text for
part of my outline. Now I'm developing more
sophisticated capabilities for my outline expand, I'm turned it into
a real program now something that I
can interact with. Let me show you an
example now here's my first action being run. I'm saying write 3.5.32. Now what that means is write the content for the bullet
point that was labeled 3.5.3. Labeled 3.5.3, you're going
to write the text for it or for that part
of this section in the outline and you're going
to write two paragraphs. What we see is it takes the bullet point 3.5.3
from the outline, which was experimenting with
tone and style variations. It then writes two paragraphs of text for that bullet point. I've created an action, I've defined it, I've created a menu of actions, and I've defined it in my prompt and now I can run that action and get
the text generated. Then we see it prompts this again, what do
we want to do next? This is actually not part
of the texts that wrote. It did write two paragraphs then asked me what I
want it to do next. Then now I'm going to go
back and I'm going to do exactly what I did before. I'm going to say
expand on 3.5.2. This is what I did
before and now it knows the difference and it knows
that's a different action. It goes and expands 3.5.2 and puts the
outline for it again. Then go down and I say, okay, give me text for 3.5.2, I notice something interesting. I'm actually making a typo here, but it's being smart and inferring what
I'm supposed to do. This is an interesting thing, it tries to help you out,
tries to get things right. It knows based on the
pattern that what I probably meant was write 3.5.2, instead I wrote text. It's a Smart menu action system. Then it actually
goes and it pulls on that bullet point 3.5.2.3. Sorry I said that wrong, it's 3.5.2.3 and then it
writes one paragraph of text. I've created basically
a complex program where I can expand my
outline if I want to, or I can have it write the
text for part of the outline, but I don't have
to repeat myself. I get to use this
simple little format. I've explained
what the format is and now I can re-run the
actions whenever I want to. One way this is useful to me is, if you're doing the same task
over and over with prompts, it can be helpful to use the menu actions
pattern to basically define a set of actions on a menu of a prompt that
you use all the time, and then whenever you
want to iterate really quickly using that content
and those set of actions, you can just introduce that menu actions prompt
and then go and use those actions over and over
on the output that you're getting in order to manipulate
it or do something. You've basically built yourself your own program within
the conversation. At the same time, sometimes an organization may have a number of
people that are doing the same job and they
can share actions with each other to help
automate different tasks. This can be really useful to help people be more
effective with their jobs and to share with
each other useful prompts. The other thing is, is you
don't have to worry so much about remembering exactly
how you worded it. Once you've written the action once and gotten it
to work in the menu, then you can reuse it over
and over without worrying about not quite getting
it right when you do it. Then that leads into a final thing that's really useful about the menu actions pattern is
that within an organization, you can share a set of common menu actions that
everybody should use and you can codify the best wording for those prompts and for those actions and
what they should do, maybe a codified best
practices into them, and then share them
across the organization. It allows for knowledge
sharing and reuse of different prompts and then easy application
of those prompts. You could also
imagine baking these into a root prompt
for something like a customer service portal
where you want to give people certain actions they can run to look up information
about their account. They could do it in
natural language, but you could also describe here are some actions you could run and allow them to get
better behavior out of it. The menu actions pattern is
a really powerful pattern that allows us to easily reuse other prompts and actions that we've used to share
them with others and develop knowledge
bases of them so that we can become more
effective prompt engineers.