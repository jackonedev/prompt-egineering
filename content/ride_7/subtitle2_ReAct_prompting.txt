Large language model is
as powerful as they are, they can't do everything
on their own. They're going to have to reach out to other data
sources and they have to learn how to use other tools to be really
effective every time. One of the things we have
to learn how to do is build prompts that can allow the
large language model to essentially reach in and query new information to use other
tools that can help it do reasoning or computations
that fundamentally is not designed to do and so how
do we go about doing that? One way of doing that is with
an approach called React. The idea behind this
is that we want to teach essentially the large
language model how to think through a process and understand steps where
it needs to go and use some other tool to
take some other action outside of it and
get the result of that tool and bring
it back in as some type of computation or result that it can
then incorporate. There's a specific way of
writing prompts to do this. Now, this is similar to chain of thought prompting
like we saw before. We're going to use some
of those same concepts from chain of thought prompting, but we're going to expand the approach to have this
concept of certain things that the large language
model knows it needs to use some external tool to perform. Let's take a look at this. Now bear with me because
this is a longer example. We're going to do a single
example that we're going to teach the language model with, and then we're going to ask
it to perform the same task. In this example, we have a task which is calculate
when I need to arrive at the Music City BMX
national race for my son to be on time for
his 9:00-10:00 open race. BMX is a bicycle racing sport. Some of my examples lately
have been around BMX. Music City BMX is a local
BMX track here in Nashville, they house one of the big
national races for BMX racing. One of the things, as
I need to figure out, when do I need to
show up at the track? Because these are all
day multi-day events. Sometimes you may want to figure out how late can I sleep before getting in the car and
driving in order to arrive? What happens is in these races, you have hundreds of [inaudible] little races that are essentially 30 seconds each. These are called
motos that are run and you want to figure
out when your moto 87, for example, well, how long do I need to
wait after the start, before that race
is going to start? Sometimes there's a balance
of trying to figure out when do I need to be
at the track actually, as opposed to when
does the race start? What we're going to do is
we're going to have it solved this problem for us. We're going to pretend
to solve this problem. This isn't actually solving it, but we're going to show you
how this process works. We give it a task and
we give it an example which is calculate
when I need to arrive at the Music City BMX national race for
my son to arrive on time for his
9:00-10:00 open race. Then we say, think, I need to find out what
time the first race begins. I can use a web search of the Music City BMX site
to get that information. Remember, this is our example. We're saying, here's
the thought process. I need to first figure
out the first step. Now you remember
back to chain of thought where we're
trying to have it explain its reasoning, we're doing the same thing. We're explaining the
reasoning behind it. We're saying, I need to find out what time the
first race begins. We're explaining what
we're trying to do. I can use a web search of the Music City BMX site
to get that information. Then we have the next
thing we do which is we say action search, and then we give the
Music City BMX website. Action here in the
search is basically a tool that it's
learning to use. It's learning to use some
external tool, in this case, a web search so it
knows that there's certain information
it does not have and so we're teaching it when you need information
that you don't have, go and search for it and you can search for it
with a website. Then it says, the
result we tell it is all races start at 09:00
AM so then we say think, I need to find out
how many motos run before the
9:00-10:00 open race. Motos are essentially
the individual races that are going to run
before that race. I can use a web search of Music City BMX site to get that information
and then we show it again another
example of searching assuming there's a
search tool available to it for the Music City BMX site. Then result, we
show it the result. There are 30 motos that run before the 9:00-10:00 open race. Then we say, think, I need to find out how long
each moto took last year. I can use the video
live stream from the USA BMX website and record how long the
first 10 motos took. Then we say action video and we give it some fake video
and pretend that, hey, we were able to go and
pull this video down in time something and then result. The first 10 motos
took five minutes. Think if 10 motos
took five minutes, 30 minutes, we'll
take 15 minutes. The race starts at
09:00 AM so I need to arrive before 9:15 AM
when the race starts. I will arrive 30 minutes
early at 08:45 AM to be safe. Remember this is
our faux example. We've imagined a scenario where I need to solve this
problem and I'm using a series of web searches
and then watching a video from a prior year to figure out how long
things took and I'm trying to teach the
large language model, in this case, ChatGPT, to use these same tools
to solve the problem. Then I ask it, here's the new task. Calculate what time
my 36-40 novice race will end at the USA
BMX Grand Nationals and then I say think, to prompt to start thinking
what is the next step. You'll notice what
it does. It then says I need to find out what time the first
race begins at the USA BMX Grand Nationals, I can use a web search of the USA BMX site to
get the information. Action search USA
BMX Events Grants. Notice it's picked up
on a couple of things. Is picked up on the idea
that has this tool called search that it can use to
go and pull in information. You'll notice it's
also picked up on the format of the URL. Now this format I had was just completely fictitious
in this example, but it's picked up that, oh, there must be this formatting, there must be a pattern behind
these URLs that I can use. I can go and search
and use some knowledge of the structure of those URLs to pull in
the right information. It's learned essentially how to go into a web search and
then it says result. Note as an AI language model, I'm unordered perform
web searches. Please assume a
hypothetical result of the purpose of this exercise. The first race begins
at ADM. Now what's interesting here is
that we're actually integrating this
into a real system. We can have the system
whenever it sees a result, stop pulling the actual result, put it in there, and then basically
feed this first, sec chunk back to the language model to then
continue the process. We don't actually have
to worry about if it's going to fake the rest of this, we could just have it go and we can incrementally
get to every, each time we get a new result out that we actually
need to fill in, we could go and
run the web search and fill in that result. It then keeps going.
It says I need to find out how many motors run before the 36-40 novice race
at BMX grand nationals. I can search and it
goes and searches on the grants and then it has
a hypothetical result. There are 120 motos. Goes and thanks again. I need to find out how long
each moto took last year. I can use the video
live stream and then it picked up on the URL pattern. It's learning a lot of things. It's learning how to use
the tool and how to input data in a particular format for it based on what I showed. It then says, okay, here's the result from that. Then it says, think if 10 motors took six minutes each
or took six minutes, then each moto took an
average of 0.6 minutes, therefore, 120 motors will take approximately 72 minutes. The first race starts at ADM, so 36-40 novice races
start around 9:12 AM. I need to find out how long the 36 novice race
itself will take. It goes and does
that in and then it says if the 36 novice
race starts around 9:12, then it will end around 9:15. This is the approximate time my race will end at
the USA BMX nationals. What's interesting is
that you actually end up, in the end, getting
slightly off track. It gave me the begin and end. It's telling me the begin time, but it also went and
calculated the end time, which I may or may not want. But the more important thing is, is that along the way
it followed my pattern. Up here, I taught it this
concept of searching. I had action search,
musiccitybmx.com. I had another action search
for musiccitybmx.com. I had an action
video right here. It learned how to use
these tools and then it's applying the exact
same tools down here. It's at applying search.
It applies it again. Then it applies video. It's applying it
using the format. You can imagine it's
essentially learning to run a web search
to watch a video. But again, these are tools, so it could basically
go and send some information
off to the tool, get an answer back, and then pick up
in its reasoning. Now the way that
we would do this is we would have to
have a way if we're going to use this to actually when it gets to
the point where it says, here's what I'm going to do, we would stop it, and go give that data
to the real tool, get the answer, and then come
put it in for the result. Then we would feed
this whole thing back in with the correct
answer is the prompt. It then hopefully
we'll run through up until it gets
another action in which case we would go and get the real result from that tool, put it into the prompt in continuing and we would continue down until we got to a point
where we had an output. Now a better way of doing
this would be to have some way of saying, okay, I'm done and I should have put that
into the prompt here. But this is doing basically,
it's teaching it. Here are some tools that you can use if you use this format. You can go and run this particular tool and you
described the tool to it. Now, other ways to do this, if I didn't have
every tool used, I could have edited this prompt and I could
have had a description of each tool and the format and other information that
it can use to help us figure out which tool to use. Now in my simple example, I did it just based on
giving up patterns that I had directly in the few-shot
examples that I provided. But you can also
have other ways of catalogs of tools in
their description. It can think about
which ones to use at the appropriate time and
you see how it's beginning to reason and know which tool do I need to use
at which point in time to get which type
of information so you can teach it to do
this problem-solving. You can go and integrate it with other tools and you can build these prompts that allow it
to tap into other tools. You see this in a variety
of different frameworks. There is a tool
you may have heard about called lang chain, which is a framework for writing these types of
automation processes. They use react underneath
the hood in order to be able to go and do some of the interesting things
like this that they do.